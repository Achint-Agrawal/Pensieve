<?xml version="1.0" encoding="UTF-8"?>
<svg
  width="1400"
  height="980"
  viewBox="0 0 1400 980"
  version="1.1"
  role="img"
  aria-labelledby="title desc"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <title id="title">User-Owned Cross-Platform Memory Layer — Architecture</title>
  <desc id="desc">Diagram showing ingestion, storage (graph and vector databases), hybrid retrieval, access control, agent layer, and mapped human memory types.</desc>

  <defs>
    <marker id="arrow" markerWidth="10" markerHeight="10" refX="10" refY="5" orient="auto" markerUnits="strokeWidth">
      <path d="M0 0 L10 5 L0 10 Z" fill="#333" />
    </marker>
    <marker id="arrowLight" markerWidth="10" markerHeight="10" refX="10" refY="5" orient="auto" markerUnits="strokeWidth">
      <path d="M0 0 L10 5 L0 10 Z" fill="#666" />
    </marker>
    <style type="text/css">
      <![CDATA[
      text { font-family: "Helvetica Neue", Arial, sans-serif; fill:#111; }
      .title { font-size:18px; font-weight:700; }
      .small { font-size:13px; }
      .legend { font-size:12px; fill:#333; }
      .box { fill:#ffffff; stroke:#333333; stroke-width:2px; rx:12; ry:12; }
      .box-light { fill:#e6f2ff; stroke:#2f6f9f; stroke-width:2px; rx:12; ry:12; }
      .box-graph { fill:#fff2cc; stroke:#b38600; stroke-width:2px; rx:12; ry:12; }
      .box-vector { fill:#d5f5e3; stroke:#1f8a5b; stroke-width:2px; rx:12; ry:12; }
      .box-retrieval { fill:#f9e79f; stroke:#b36b00; stroke-width:2px; rx:12; ry:12; }
      .box-access { fill:#f5cba7; stroke:#b34f00; stroke-width:2px; rx:12; ry:12; }
      .box-agents { fill:#d6eaf8; stroke:#2b6aa3; stroke-width:2px; rx:12; ry:12; }
      .cluster { fill:none; stroke:#999999; stroke-width:2px; stroke-dasharray:8 6; rx:14; ry:14; }
      .mem-ellipse { fill:#fff0e0; stroke:#c47a00; stroke-width:1.5px; }
      ]]>
    </style>
  </defs>

  <!-- Title (redundant text element for visual label) -->
  <text x="40" y="36" class="title">User-Owned Cross-Platform Memory Layer — Architecture</text>

  <!-- Ingestion Layer -->
  <rect x="80" y="72" width="430" height="110" class="box-light" />
  <text x="110" y="102" class="small" font-weight="700">Ingestion Layer</text>
  <text x="110" y="126" class="small">Sources: Agents, Apps, Devices</text>
  <text x="110" y="146" class="small">• Normalize data • Generate embeddings • Attach metadata</text>

  <!-- Storage Layer -->
  <rect x="80" y="210" width="420" height="150" class="box-graph" />
  <text x="120" y="242" class="small" font-weight="700">Graph DB (Neo4j / Graphiti)</text>
  <text x="120" y="266" class="small">• Entities &amp; relationships</text>
  <text x="120" y="286" class="small">• Workflows &amp; dependencies</text>
  <text x="120" y="306" class="small">• Provenance &amp; permissions</text>

  <rect x="540" y="210" width="420" height="150" class="box-vector" />
  <text x="580" y="242" class="small" font-weight="700">Vector DB (Pinecone / Weaviate / Milvus)</text>
  <text x="580" y="266" class="small">• Embeddings (text, images, audio)</text>
  <text x="580" y="286" class="small">• Semantic indexes</text>
  <text x="580" y="306" class="small">• Fast semantic recall</text>

  <!-- Retrieval Layer -->
  <rect x="320" y="390" width="520" height="110" class="box-retrieval" />
  <text x="360" y="420" class="small" font-weight="700">Hybrid Retrieval &amp; Reasoning</text>
  <text x="360" y="442" class="small">1. Semantic search (Vector DB)</text>
  <text x="360" y="462" class="small">2. Graph traversal / reasoning (Graph DB)</text>
  <text x="360" y="482" class="small">3. Fuse candidates + permissions</text>

  <!-- Access & Control Layer -->
  <rect x="320" y="520" width="520" height="92" class="box-access" />
  <text x="360" y="548" class="small" font-weight="700">Access &amp; Control Layer</text>
  <text x="360" y="570" class="small">• User ownership &amp; permission graph</text>
  <text x="360" y="590" class="small">• Portable tokens / cross-platform sharing</text>

  <!-- Agents / Interface Layer -->
  <rect x="320" y="628" width="520" height="92" class="box-agents" />
  <text x="360" y="656" class="small" font-weight="700">AI Agents / Apps</text>
  <text x="360" y="678" class="small">• Personal assistants • Productivity tools • Chatbots / LLMs</text>

  <!-- Memory Types Cluster -->
  <rect x="1000" y="120" width="340" height="680" class="cluster" />
  <text x="1030" y="150" class="small" font-weight="700">Memory Types — Mapping</text>

  <!-- Memory Type Ellipses -->
  <g>
    <ellipse cx="1170" cy="210" rx="140" ry="34" class="mem-ellipse" />
    <text x="1070" y="210" class="small" font-weight="700">Episodic</text>
    <text x="1088" y="230" class="small">→ Graph + Vector</text>

    <ellipse cx="1170" cy="280" rx="140" ry="34" class="mem-ellipse" />
    <text x="1090" y="280" class="small" font-weight="700">Semantic</text>
    <text x="1120" y="300" class="small">→ Vector + Graph</text>

    <ellipse cx="1170" cy="350" rx="140" ry="34" class="mem-ellipse" />
    <text x="1095" y="350" class="small" font-weight="700">Procedural</text>
    <text x="1120" y="370" class="small">→ Graph + Vector</text>

    <ellipse cx="1170" cy="420" rx="140" ry="34" class="mem-ellipse" />
    <text x="1094" y="420" class="small" font-weight="700">Relational</text>
    <text x="1140" y="440" class="small">→ Graph</text>

    <ellipse cx="1170" cy="490" rx="140" ry="34" class="mem-ellipse" />
    <text x="1106" y="490" class="small" font-weight="700">Contextual</text>
    <text x="1140" y="510" class="small">→ Vector</text>

    <ellipse cx="1170" cy="560" rx="140" ry="34" class="mem-ellipse" />
    <text x="1096" y="560" class="small" font-weight="700">Emotional/Affective</text>
    <text x="1120" y="580" class="small">→ Vector + Graph</text>

    <ellipse cx="1170" cy="630" rx="140" ry="34" class="mem-ellipse" />
    <text x="1098" y="630" class="small" font-weight="700">Spatial / Temporal</text>
    <text x="1120" y="650" class="small">→ Graph + Vector</text>

    <ellipse cx="1170" cy="700" rx="140" ry="34" class="mem-ellipse" />
    <text x="1108" y="700" class="small" font-weight="700">Meta-Memory</text>
    <text x="1140" y="720" class="small">→ Graph (provenance &amp; permission)</text>
  </g>

  <!-- Connectors -->
  <line x1="300" y1="182" x2="300" y2="210" stroke="#333" stroke-width="2" marker-end="url(#arrow)" />
  <line x1="420" y1="182" x2="760" y2="210" stroke="#333" stroke-width="2" marker-end="url(#arrow)" />
  <line x1="300" y1="360" x2="420" y2="390" stroke="#333" stroke-width="2" marker-end="url(#arrow)" />
  <line x1="760" y1="360" x2="620" y2="390" stroke="#333" stroke-width="2" marker-end="url(#arrow)" />
  <line x1="580" y1="500" x2="580" y2="520" stroke="#333" stroke-width="2" marker-end="url(#arrow)" />
  <line x1="580" y1="612" x2="580" y2="628" stroke="#333" stroke-width="2" marker-end="url(#arrow)" />

  <!-- Dotted Connections -->
  <g stroke="#666" stroke-width="1.4" stroke-dasharray="6 5" fill="none">
    <line x1="500" y1="240" x2="940" y2="220" marker-end="url(#arrowLight)" />
    <line x1="960" y1="240" x2="1000" y2="240" marker-end="url(#arrowLight)" />
    <line x1="820" y1="240" x2="1020" y2="300" marker-end="url(#arrowLight)" />
    <line x1="500" y1="320" x2="980" y2="360" marker-end="url(#arrowLight)" />
    <line x1="820" y1="320" x2="1020" y2="420" marker-end="url(#arrowLight)" />
    <line x1="420" y1="360" x2="1020" y2="540" marker-end="url(#arrowLight)" />
  </g>

  <!-- Legend -->
  <rect x="40" y="820" width="360" height="110" class="box" />
  <text x="60" y="848" class="legend" font-weight="700">Legend / Quick Notes</text>
  <text x="60" y="872" class="legend">• Use Graph DB for explicit relationships, provenance, workflows, permissions.</text>
  <text x="60" y="892" class="legend">• Use Vector DB for embeddings, semantic search, fuzzy recall of unstructured data.</text>
  <text x="60" y="912" class="legend">• Hybrid retrieval: semantic candidate generation (vector) → structured reasoning (graph).</text>

</svg>
